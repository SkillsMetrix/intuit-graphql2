import { quotes, users } from "./fakedb.js";
import { randomBytes } from "crypto";

const resolvers = {
  Query: {
    greet: () => {
      return "Welcome to GraphQL";
    },
    users: () => users,
    quotes: () => quotes,
    user: (_, { id }) => users.find((user) => user.id == id),
    iquote: (_, { by }) => quotes.filter((quote) => quote.by == by),
  },
  User: {
    quotes: (ur) => quotes.filter((quote) => quote.by == ur.id),
  },
  Mutation: {
    signupUserDummy: (_, { firstName, lastName, email, password }) => {
      const id = randomBytes(5).toString("hex");
      users.push({
        id,
        firstName,
        lastName,
        email,
        password,
      });
      return users.find((user) => user.id == id);
    },
  },
};
export default resolvers;


-------------

import { gql } from "apollo-server";

const typeDefs = gql`
  type Query {
    greet: String
    users: [User]
    user(id: ID): User
    quotes: [Quote]
    iquote(by: ID): [Quote]
  }
  type User {
    id: ID
    firstName: String
    lastName: String
    email: String
    password: String
    quotes: [Quote]
  }
  type Quote {
    name: String
    by: ID
  }
  type Mutation {
    signupUserDummy(
      firstName: String
      lastName: String
      email: String
      password: String
    ): User
  }
`;

export default typeDefs;



------------
import { ApolloServer } from "apollo-server";
 import { ApolloServerPluginLandingPageGraphQLPlayground } from "apollo-server-core";
import typeDefs from "./schemaGql.js";
import resolvers from "./resolvers.js";


const server = new ApolloServer({
  typeDefs,
  resolvers,
  plugins: [ApolloServerPluginLandingPageGraphQLPlayground()],
});
server.listen().then(({ url }) => {
  console.log("server is ready " + url);
});
